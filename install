#!/bin/bash
set -e
cd "$(dirname "$BASH_SOURCE")"

. lib/symlinks.sh
. lib/options.sh

# Default options
[[ -n "$DOTFILES_FORCE_SETUP" ]] || export DOTFILES_FORCE_SETUP=false
[[ -n "$DOTFILES_SILENT" ]] || export DOTFILES_SILENT=false
[[ -n "$DOTFILES_VERBOSE" ]] || export DOTFILES_VERBOSE=false
export DOTFILES_INSTALL=true
update=false
overwrite_file=.overwrite

print_help () {
    cat >&2 <<- EOF
	usage: install [-adfhquv]
	options:
	  -a, --overwrite-all       overwrite all existing dotfiles
	  -d, --no-overwrite        don't overwrite existing dotfiles
	  -f, --force-setup         run setup for all programs, even
	                            if they are not found
	  -q, --quiet, --silent     don't print log messages
	  -u, --update              update repository before install
	  -v, --verbose             print detailed log messages
	  -h, --help                print this message
	EOF
}

# usage: setup PROGRAM
setup () {
    if [[ -n "$1" ]]; then
        local program="$1"
    else
        echo install: \`setup\` function: bad usage >&2
        return 1
    fi

    # Use specific `setup` script, if present
    [[ ! -f "$program/setup" ]] || {
        "$program/setup"
        return
    }

    local setup_dir="$HOME/.config/$program"
    [[ -d "$setup_dir" ]] || mkdir -p "$setup_dir"

    link_files_in "$program" -t "$setup_dir"
}

# Create an empty overwrite permission (to ask)
trap 'rm "$overwrite_file" 2> /dev/null' EXIT INT TERM
echo > "$overwrite_file"

parse_opts adfhquv "$@" || {
    print_help
    exit 1
}
set -- "${OPTS[@]}"
while [[ $# -gt 0 ]]; do
    case "$1" in
        -a | --overwrite-all)
            echo A > "$overwrite_file" ;;
        -d | --no-overwrite)
            echo D > "$overwrite_file" ;;
        -f | --force-setup)
            DOTFILES_FORCE_SETUP=true ;;
        -q | --quiet | --silent)
            DOTFILES_SILENT=true ;;
        -u | --update)
            update=true ;;
        -v | --verbose)
            DOTFILES_VERBOSE=true ;;
        -h | --help)
            print_help
            exit 0
            ;;
        *)  print_help
            exit 1
            ;;
    esac
    shift
done

# Update repo
if $update; then
    $DOTFILES_SILENT || echo Updating repository...
    git pull $($DOTFILES_SILENT && echo -q) origin main

    # Install using the updated script
    exec ./install
fi

programs="$( \
    # List all files, appending `/` to directories
    ls -p |
    # Filter for directories (except `lib`)
    grep -Ev '^lib/$|.*[^/]$' |
    # Strip out the leading `/`
    sed 's|/$||'
)"

# Setup all programs
skipped=()
for program in $programs; do
    if $DOTFILES_FORCE_SETUP || which "$program" &> /dev/null; then
        setup $program
    else
        skipped+=($program)
    fi
done

[[ -z ${skipped[@]} ]] || $DOTFILES_SILENT || {
    echo [-] Some programs were not found, setup skipped for:
    for program in "${skipped[@]}"; do
        echo " |  > $program"
    done
}
