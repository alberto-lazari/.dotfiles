#!/bin/bash
set -e
cd "$(dirname "$BASH_SOURCE")"

. lib/symlinks.sh
. lib/options.sh

# Default options
export DOTFILES_INSTALL=true
export SILENT=false
export VERBOSE=false
update=false
overwrite_file=/tmp/dotfiles.overwrite

print_help() {
    cat >&2 <<- EOF
	usage: install [-hfnquv]
	options:
	-f, --force, --overwrite  force existing dotfiles overwrite
	-n, --no-overwrite        don't overwrite existing dotfiles
	-q, --quiet, --silent     don't print log messages
	-u, --update              update repository before install
	-v, --verbose             print detailed log messages
	-h, --help                print this message
	EOF
}

# Create an empty overwrite permission (to ask)
trap 'rm "$overwrite_file" 2> /dev/null' EXIT INT TERM
echo > "$overwrite_file"

parse_opts hfnquv "$@" || {
    print_help
    exit 1
}
set -- "${OPTS[@]}"
while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force|--overwrite)
            echo Y > "$overwrite_file";;
        -n|--no-overwrite)
            echo N > "$overwrite_file";;
        -q|--quiet|--silent)
            SILENT=true;;
        -u|--update)
            update=true;;
        -v|--verbose)
            VERBOSE=true;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)  print_help
            exit 1
            ;;
    esac
    shift
done

# Update repo
if $update; then
    $SILENT || echo Updating repository...
    git pull $($SILENT && echo -q) origin main

    # Install using the updated script
    exec ./install
fi

programs="$( \
    # List all files, appending / to directories
    ls -p |
    # Filter for directories (except `lib`)
    grep -Evw 'lib|.*[^/]$' |
    # Strip out the leading /
    sed 's|/$||'
)"

# Setup all programs
for program in $programs; do
    if which "$program" &> /dev/null; then
        "$program/setup"
    else
        $SILENT || echo Warning: $program not installed, skipping setup... >&2
    fi
done
