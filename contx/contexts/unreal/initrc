export UNREAL_CONTEXT_DIR="$(dirname "$(realpath "$0")")"

# Move home to dedicated directory, so Unreal can put all his junk there
UE_HOME=~/.unreal

# Find .uproject file in the current directory
UE_PROJECT="$( \
  find "$PWD" -maxdepth 1 -type f -name '*.uproject' |
  head -n 1
)"
[[ -n "$UE_PROJECT" ]] || error "no .uproject file found in '$PWD'"

# Read Unreal version from .uproject file
if which jq &> /dev/null; then
  # Use JSON parser if available
  UE_VERSION="$(< "$UE_PROJECT" jq -r .EngineAssociation)"
else
  UE_VERSION="$(grep EngineAssociation "$UE_PROJECT" | grep -o '[0-9]\+\.[0-9]\+')"
fi

# Set variables based on platform
case $(uname -o) in
  Darwin)
    UE_PLATFORM=Mac
    UE_ROOT="/Users/Shared/Epic Games/UE_$UE_VERSION/Engine"
    UNREAL_EDITOR=(open -na "$UE_ROOT/Binaries/$UE_PLATFORM/UnrealEditor.app/Contents/MacOS/UnrealEditor" --args)
    UE_BUILD=("$UE_ROOT/Build/Batchfiles/RunUBT.sh")
    UE_AUTOMATION=("$UE_ROOT/Build/Batchfiles/RunUAT.sh")
    ;;
  GNU/Linux)
    # Check for WSL windows
    if uname -r | grep -q WSL; then
      UE_PLATFORM=Win64
      UE_ROOT="/mnt/c/Program Files/Epic Games/UE_$UE_VERSION/Engine"
      UNREAL_EDITOR=("$UE_ROOT/Binaries/$UE_PLATFORM/UnrealEditor.exe")
      UE_WIN_PROJECT="$(wslpath -w "UE_PROJECT" | sed 's: :^ :g')"
      UE_BUILD_DIR="$(wslpath -w "$UE_ROOT/Build/Batchfiles/$UE_PLATFORM" | sed 's: :^ :g')"
      UE_BUILD=(cmd.exe /c "$UE_BUILD_DIR/RunUBT.bat")
      UE_AUTOMATION=(cmd.exe /c "$UE_BUILD_DIR/RunUAT.bat")
      
    else
      UE_PLATFORM=Linux
      # UE_ROOT is not clearly defined on Linux, need external config
      UNREAL_EDITOR=("$UE_ROOT/Binaries/$UE_PLATFORM/UnrealEditor")
      UE_BUILD=("$UE_ROOT/Build/Batchfiles/RunUBT.sh")
      UE_AUTOMATION=("$UE_ROOT/Build/Batchfiles/RunUAT.sh")
    fi
    ;;
  Msys)
    UE_PLATFORM=Win64
    UE_ROOT="/c/Program Files/Epic Games/UE_$UE_VERSION/Engine"
    UNREAL_EDITOR=("$UE_ROOT/Binaries/$UE_PLATFORM/UnrealEditor.exe")
    UE_WIN_PROJECT="$(cygpath -m "UE_PROJECT" | sed 's: :^ :g')"
    UE_BUILD_DIR="$(cygpath -m "$UE_ROOT/Build/Batchfiles/$UE_PLATFORM" | sed 's: :^ :g')"
    UE_BUILD=(cmd.exe /c "$UE_BUILD_DIR/RunUBT.bat")
    UE_AUTOMATION=(cmd.exe /c "$UE_BUILD_DIR/RunUAT.bat")
    ;;
  *) error "'$(uname -o)' system is not supported on Unreal" ;;
esac

# Add Unreal scripts to path
[[ -d "$UE_ROOT" ]] ||
  echo >&2 "warning: Unreal Engine $UE_VERSION not found in '$UE_ROOT'"

# Create a terminal window dedicated to vim
vim_window () {
  ps ax |
  grep "vim -c bw" |
  grep -vq grep ||
    alacritty msg create-window \
      --working-directory="$PWD/Source/$(basename "$PWD")" \
      -e vim -c 'bw' -u "$UNREAL_CONTEXT_DIR/vimrc"
}

# Open project in unreal editor (if not already open)
ue () {
  ps ax |
  grep "$UNREAL_EDITOR $UE_PROJECT" |
  grep -vq grep ||
    HOME="$UE_HOME" "${UNREAL_EDITOR[@]}" "$UE_PROJECT"
}

# Build C++ source
build () {
  local project build_type platform target cook
  [[ -z "$1" ]] || build_type="$1"
  [[ -z "$2" ]] || platform="$2"

  # Use cmd-escaped project path. If empty it will use the default
  project="$UE_WIN_PROJECT"

  : ${project:=$UE_PROJECT}
  : ${build_type:=Development}
  : ${platform:=$UE_PLATFORM}
  : ${cook:=false}

  case "$build_type" in
    [Dd]evelopment)
      build_type=Development
      target=Editor
      ;;
    [Ss]hipping | [Rr]elease)
      build_type=Shipping
      target=Game
      ;;
    [Cc]ook)
      build_type=Shipping
      target=Game
      cook=true
      ;;
    *) error "Build type '$build_type' not supported" ;;
  esac

  ${UE_BUILD[@]} "$platform" "$build_type" \
    -Project="$project" \
    -TargetType="$target" \
    -Progress

  ! $cook ||
  ${UE_AUTOMATION[@]} BuildCookRun \
    -project="$project" \
    -noP4 \
    -platform="$platform" \
    -clientconfig=Shipping \
    -serverconfig=Shipping \
    -cook \
    -allmaps \
    -stage \
    -pak \
    -compressed \
    -nocompileeditor \
    -nocompilerelatedcode \
    -archive
}
