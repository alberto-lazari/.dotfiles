# Use GNU-ls when available
alias ls="$(if which gls &> /dev/null; then echo gls; else echo ls; fi) -h --group-directories-first --color=auto --quoting-style=literal"
# Don't use long options if they throw errors
ls &> /dev/null || alias ls='ls -h --color=auto'
alias l='ls -1'
alias ll='ls -Al'
alias la='ls -A'

alias cl='clear'
alias tree='tree -C'
t () { tree -L 2 "$@"; }
alias chx='chmod +x'
! which bpytop &> /dev/null ||
  alias top='bpytop'
! which bat &> /dev/null ||
  alias bat="bat --theme OneHalf$([[ "$(system-theme 2> /dev/null)" = light ]] && echo Light || echo Dark)"
system_theme () {
  \system-theme "$1" && eval "$(\system-theme -s)"
}
! which system-theme &> /dev/null ||
  alias system-theme='system_theme'
pdfshrink () {
  local usage=$(cat <<- EOF
		usage: pdfshrink [-l LEVEL] DOCUMENT.pdf
		options:
		  -l    compression level in range 0..4 (default = 2)
		EOF
  )

  [[ -n "$1" ]] || {
    echo $usage >&2
    return 1
  }

  while (( $# > 0 )); do
  case "$1" in
    -l) shift
      local level="$(( $1 + 1 ))"
      ;;
    *.pdf | *.PDF)
      local file="$1"
      local filename="${file/%.(pdf|PDF)}"
      ;;
    *) echo $usage >&2
      return 1
      ;;
  esac
  shift

  done

  which gs &> /dev/null || {
    echo error: ghostscript not found >&2
    return 1
  }

  levels=(
    default
    prepress
    printer
    ebook
    screen
  )

  gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite \
    -dEmbedAllFonts=true -dSubsetFonts=true \
    -dColorImageDownsampleType=/Bicubic -dColorImageResolution=144 \
    -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=144 \
    -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=144 \
    -dPDFSETTINGS=/${levels[${level-3}]} \
    -sOutputFile="$filename-compressed.pdf" \
    "$file"
}

# Git
alias s='git status --short'
alias a='git add'
alias cb='git checkout'
alias pull='git pull'
alias push='git push'
alias rebase='git rebase'
alias merge='git merge'
alias restore='git restore'
alias reset='git reset'
alias stash='git stash'
alias pop='git stash pop'
alias submod='git submodule'
alias gd='git diff'
alias clone='git clone --recurse-submodules'
alias feature='git-flow feature'

# Git custom
cf () { git checkout "feature/$1"; }
# Custom completion
if [[ -n ${BASH_VERSION:-} ]]; then
  _cf() {
    # List all local branches starting with "feature/"
    local branches
    branches=$( \
      git for-each-ref --format='%(refname:short)' refs/{heads,remotes/*}/feature/* 2> /dev/null |
      sed 's|^origin/||' |
      grep '^feature' |
      sed 's|^feature/||')

    COMPREPLY=($(compgen -W "$branches" -- "${COMP_WORDS[1]}"))
  }
  complete -F _cf cf
elif [[ -n ${ZSH_VERSION:-} ]]; then
  _cf() {
    # List all local branches starting with "feature/"
    local -a branches
    branches=( $( \
      git for-each-ref --format='%(refname:short)' refs/heads/feature/* 2> /dev/null |
      sed 's|^origin/||' |
      grep '^feature' |
      sed 's|^feature/||') )

    _arguments '*:branch:->branch'
    if (( CURRENT == 2 )); then
      compadd -a branches
    fi
  }
  # Run compdef after compinit in .zshrc (yes, ugly but there's no other way)
fi
alias c='git commit -am'
alias commit='git commit -m'
alias amend='git commit -a --amend'
alias rmbr='git branch -d'
alias publish='git push -u origin "$(git branch --show-current)"'
alias unstage='git restore --staged'
cleanbr () {
  local branches=()
  git fetch --prune &> /dev/null
  for branch in $(git branch | grep -v '^\*'); do
    echo "  $branch"
    branches+=($branch)
  done
  (( "${#branches[@]}" > 0 )) || return 0
  bash -c \
    $'read -rp >&2 \'Remove all these local branches? [y/N] \' answer
      [[ "$answer" = [Yy] ]]' ||
    return 1
  git branch -D "${branches[@]}"
}
submod-add () {
  if [[ -z "$1" ]]; then
    echo 'error: need to specify a submodule dir' >&2
    return 1
  fi
  git submodule add $(git -C $1 remote get-url origin) $1
}
github-clone () {
  local url='git@github.com:'
  if [[ -z $1 ]]; then
    echo 'error: need a repo to clone (user/repo)' >&2
    return 1
  fi

  if [[ $1 = --https ]]; then
    url='https://github.com/'
    shift
  fi

  if [[ $1 = -* ]]; then
    echo 'usage: github-clone [--https] user/repo[.git] [dir]'
    return
  fi

  local repo=$(sed 's|^.*github\.com[:/]||' <<< $1)
  git clone --recurse-submodules $url$repo $2
}

# macOS specific aliases
if [[ "$(uname)" = Darwin ]]; then
  # macOS inconsistencies workarounds
  alias umount='diskutil unmount'
  alias clear="printf '\33c\e[3J'"

  # Run x86 binaries with Rosetta
  alias x86='arch -x86_64'

  # Use clamshell mode on battery power
  clam () {
    sudo pmset -a disablesleep 1
    bash -c 'read -p "Close your MacBook lid, then press enter"'
    sudo pmset -a disablesleep 0
  }

  # Homebrew
  up () {
    # Update Homebrew packages
    brew update && brew upgrade |
      tee >(cat) |
      # Update Alacritty icon, because an update may overwrite it
      if grep -q '[Aa]lacritty'; then ~/.config/alacritty/update-icon; fi
  }

  # Applications
  alias chrome='open -a "Google Chrome"'
  zathura () {
    [[ $# -gt 0 ]] || { echo 'usage: zathura file [...]' >&2; return 1; }
    local file
    for file in "$@"; do
      open -na Zathura --args "$(readlink -f "$file")"
    done
  }
  finder () {
    local arg="$1"
    # Open current directory by default
    [[ -n "$arg" ]] || arg="$PWD"

    if [[ "$arg" = *.app ]]; then
      open -R "$arg"/$(ls -AU "$arg" | head -n 1)
    elif [[ -d "$arg" ]]; then
      open "$arg"
    else
      open -R "$arg"
    fi
  }
fi

# Hook for local aliases
[[ ! -f ~/.config/sh/aliases.local ]] || . ~/.config/sh/aliases.local
