" Basic configuration
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Window title format: 'vim - file [+-=] (1 of n)'
set title titlestring=vim\ -\ %t%(\ [%M]%)%a
" Normal backspace behavior
set backspace=2
" Indent with 2 spaces
set expandtab tabstop=2 softtabstop=2 shiftwidth=2
" Show whitespaces with ':set list'
set listchars=eol:$,tab:-->,trail:~,extends:>,precedes:<,space:Â·
" Indent filetype
filetype plugin indent on
" Fix indentation problems
set nosmartindent cinkeys-=0#
" Enable syntax highlighting
syntax on
" Use true color
set termguicolors
" Show partial command while typing it
set showcmd

" Temp files
set noswapfile nobackup undodir=~/.vim/undodir undofile
if !has('nvim')
  " Move .viminfo file
  set viminfo=%,<800,'10,/50,:1000,h,f0,n~/.vim/cache/viminfo
  "           | |    |   |   |     | |  + viminfo file path
  "           | |    |   |   |     | + file marks 0-9,A-Z 0=NOT stored
  "           | |    |   |   |     + disable 'hlsearch' loading viminfo
  "           | |    |   |   + command-line history saved
  "           | |    |   + search history saved
  "           | |    + files marks saved
  "           | + lines saved each register (old name for <, vi6.2)
  "           + save/restore buffer list
else
  set title titlestring=nvim\ -\ %t%(\ [%M]%)%a
endif


" Custom settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Scroll when over number of lines
set scrolloff=2
" Wrap preserving words and indentation
set linebreak breakindent
" Identify wrapped lines with @ and indentation
let &showbreak='@ '
" Show pattern match results. Default case-insensitive search
set incsearch ignorecase smartcase
" No ESC delay
set timeoutlen=1000 ttimeoutlen=0
" No timeout on custom mappings
set notimeout ttimeout
" Allow buffers to keep unsaved changes
set hidden
" Remove netrw banner
let g:netrw_banner = 0
" Split buffers on next child
set splitright splitbelow

" Indent with 4 spaces on specific file types
autocmd FileType java,kotlin,python,cs,cpp
\ setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4
" Spellcheck specific file types (and force 2 spaces tabs)
autocmd FileType text,latex,tex,md,markdown,typst
\ setlocal spell expandtab tabstop=2 softtabstop=2 shiftwidth=2
" Use English + Italian for spelling
set spelllang=en,it
" Highlight all scripts with bash syntax
autocmd FileType sh setlocal filetype=bash

" Trigger FileType autocmds on a vimrc source
filetype detect

" Mouse support
" Drains a crazy amount of battery power if enabled (on iTerm)
set mouse=a

" Change cursor shape on different mode
if exists('$ITERM_PROFILE')
  " Vertical bar in insert mode
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  " Block in normal mode
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  " Underline in replace mode
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  " Vertical bar in insert mode
  let &t_SI = "\e[5 q"
  " Block in normal mode
  let &t_SR = "\e[4 q"
  " Underline in replace mode
  let &t_EI = "\e[1 q"
endif


" Custom mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Easier go to start/end of line
nnoremap gs ^
vnoremap gs ^
onoremap gs ^
nnoremap gl $
vnoremap gl $
onoremap gl $
" More intuitive re-do
nnoremap U <C-r>
" Easier copy until end of line
nnoremap Y y$
" Prepend space to use the system clipboard
nnoremap <Space> "*
vnoremap <Space> "*

" Toggle undo tree
nnoremap <Space>u :UndotreeToggle<Return>
vnoremap <Space>u :UndotreeToggle<Return>

" Map fzf commands
nnoremap <Space>e :Files<Return>
nnoremap <Space>E :Files!<Return>
nnoremap <Space>b :Buffers<Return>
nnoremap <Space>B :Buffers!<Return>
nnoremap <Space>/ :RG<Return>
nnoremap <Space>? :RG!<Return>


" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if isdirectory(expand('~/.vim/pack/dotfiles'))
  " Disable custom filetype detection
  let g:polyglot_disabled = ['ftdetect']

  " Load opt plugins
  for plugin in readfile(expand('~/.vim/plugins.vim'))
    " Ignore comments
    if plugin =~ '^[^"#]'
      let plugin = substitute(plugin, '.*/', '', '')
      exe 'packadd!' plugin
    endif
  endfor

  colorscheme one
  set background=dark
  " Set light/dark theme dynamically
  if system('system-theme') == "light\n"
    set background=light
  endif

  " No '-- INSERT --' in status line
  set noshowmode

  " Custom autoclosing rules for LaTeX and Typst math mode
  for filetype in ['tex', 'latex', 'typst']
    call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': filetype})
    call lexima#add_rule({'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': filetype})
    call lexima#add_rule({'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': filetype})
    call lexima#add_rule({'char': '<space>', 'at': '\$\%#\$', 'input_before': ' ', 'input_after': ' ', 'filetype': filetype})
    call lexima#add_rule({'char': '<BS>', 'at': '\$ \%# \$', 'delete': 1, 'filetype': filetype})
  endfor

  " Disable highlighting for Java identifiers and dots
  highlight link javaIdentifier NONE
  highlight link javaDelimiter NONE

  " C++ syntax highlighting flags
  let g:cpp_attributes_highlight = 1
  let g:cpp_operator_highlight = 1
  " Custom flags from my fork
  let g:cpp_custom_type_name_highlight = 1
  let g:cpp_custom_macros_highlight = 1

  " Enable fzf history
  let g:fzf_history_dir = '~/.vim/cache/fzf-history'
  " Change fzf key bindings
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }
endif
